<PROGRAM> = <DE_LIST> ;

<DE_LIST> = <STR_FUNC_DE> <DE_LIST> | BLANK ;
<STR_FUNC_DE> = <STR_DE> | <FUNC_DE> ;

<STR_DE> = struct <IDS> LC <LOC_VAR_DE_LIST> RC SEMI ;

<FUNC_DE> = <TYPE> <IDS> LP <PRA_LIST> RP <STA_BLOCK> ;

<TYPE> =  char | int | float | bool | <STR_TYPE> ;

<STR_TYPE> = struct <IDS> ;

<PAR_LIST> = <PAR_VAR> <PAR_VAR_PLUS> ;

<PAR_VAR_PLUS> = COMMA <PAR_LIST> ;

<PAR_VAR> = <TYPE> <IDS> ;

<STA_BLOCK> = LC <LOC_VAR_DE_LIST> <STA_LIST> RC ;

<STA_LIST> = <STA> <STA_LIST> | BLANK ;

<STA> = <EXP> SEMI
       | return <EXP> SEMI
       | <STA_BLOCK>
       | if LP <B_EXP> RP <STA> <ELSE_STA>
       | while LP <B_EXP> RP <STA>
 ;
<ELSE_STA> = else <STA>
           | BLANK
 ;
<LOC_VAR_DE_LIST> = <STA_VAR_DE> <LOC_VAR_DE_LIST>
                  | BLANK
 ;
<STA_VAR_DE> = <TYPE> <VAR_LIST> SEMI
 ;
<VAR_LIST> = <VAR> <VAR_LIST_PLUS>
 ;
<VAR_LIST_PLUS> = COMMA <VAR_LIST>
 ;
<VAR> = <IDS> <VAR_ARR_PLUS>
 ;
<VAR_ARR_PLUS> = LB <S_EXP> RB
               | STOP <VAR>
               | BLANK
 ;
<EXP> = <S_EXP>
      | <B_EXP>

 ;
<IDS_PLUS> = STOP <VAR>
           | LP <PARS> RP
           | BLANK
           | LB <S_EXP> RB
 ;

<S_EXP> = <SUB_S_EXP> <SUB_S_EXP_PLUS> ;
<SUB_S_EXP_PLUS> = PLUS <SUB_S_EXP> <SUB_S_EXP_PLUS>
                 | MINUS <SUB_S_EXP> <SUB_S_EXP_PLUS>
                 | BLANK ;
<SUB_S_EXP> = <SUB_SUB_S_EXP> <SUB_SUB_S_EXP_PLUS> ;
<SUB_SUB_S_EXP_PLUS> = STAR <SUB_SUB_S_EXP> <SUB_SUB_S_EXP_PLUS>
                     | DIV <SUB_SUB_S_EXP> <SUB_SUB_S_EXP_PLUS>
                     | BLANK ;
<SUB_SUB_S_EXP> = LP <S_EXP> RP
                | <IDS> <IDS_PLUS>
                | NINT
                | REAL
                | CHAR
                | MINUS <SUB_SUB_S_EXP>
 ;
<B_EXP> = <SUB_B_EXP> <SUB_B_EXP_PLUS>
 ;
<SUB_B_EXP_PLUS> = AND <SUB_B_EXP> <SUB_B_EXP_PLUS>
                 | OR <SUB_B_EXP> <SUB_B_EXP_PLUS>
                 | BLANK
 ;
<SUB_B_EXP> = <SUB_SUB_B_EXP> <SUB_SUB_B_EXP_PLUS>
 ;
<SUB_SUB_B_EXP_PLUS> = GREATER <SUB_SUB_B_EXP> <SUB_SUB_B_EXP_PLUS>
                     | LESS <SUB_SUB_B_EXP> <SUB_SUB_B_EXP_PLUS>
                     | GREATER_EQU <SUB_SUB_B_EXP> <SUB_SUB_B_EXP_PLUS>
                     | LESS_EQU <SUB_SUB_B_EXP> <SUB_SUB_B_EXP_PLUS>
                     | EQU <SUB_SUB_B_EXP> <SUB_SUB_B_EXP_PLUS>
                     | NOT_EQU <SUB_SUB_B_EXP> <SUB_SUB_B_EXP_PLUS>
                     | BLANK
 ;
<SUB_SUB_B_EXP> = LP <B_EXP> RP
                | BOOL
                | <IDS> <IDS_PLUS>
                | NOT <SUB_SUB_B_EXP>
 ;
<PARS> = <EXP> <PARS_PLUS>
       | BLANK
 ;
<PARS_PLUS> = COMMA <PARS>
            | BLANK ;


<EXP> = <S_EXP> <S_EXP_PLUS>
 ;
<SS_EXP_PLUS> = <= <SS_EXP_PLUS>
               | >= <SS_EXP_PLUS>
               | <  <SS_EXP_PLUS>
               | >  <SS_EXP_PLUS>
               | == <SS_EXP_PLUS>
               | != <SS_EXP_PLUS>
               | BLANK
 ;
<S_EXP> = <SS_PLUS> <SS_EXP_PLUS>
 ;
<S_EXP_PLUS> = OR <S_EXP_PLUS>
               | AND <S_EXP_PLUS>
               | BLANK
 ;
<SS_EXP> = <SSS_EXP> <SSS_EXP_PLUS>
 ;
<SSS_EXP_PLUS> = PLUS <SSS_EXP_PLUS>
               | MINUS <SSS_EXP_PLUS>
               | BLAN
               | DIV <SSS_EXP_PLUS>
               | STAR <SSS_EXP_PLUS>