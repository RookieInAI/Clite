<PROGRAM> = <DE_LIST> ;

<DE_LIST> = <STR_FUNC_DE> <DE_LIST> | BLANK ;

<STR_FUNC_DE> = <STR_DE> | <FUNC_DE> ;

<STR_DE> = Struct <IDS> LC <LOC_VAR_DE_LIST> RC SEMI ;

<FUNC_DE> = <TYPE> <IDS> LP <PAR_LIST> RP <STA_BLOCK> ;

<TYPE> =  char | int | float | bool | <STR_TYPE> ;

<STR_TYPE> = struct <IDS> ;

<PAR_LIST> = <PAR_VAR> <PAR_VAR_PLUS>
           | BLANK
;

<PAR_VAR_PLUS> = COMMA <PAR_LIST>
               | BLANK
 ;
<PAR_VAR> = <TYPE> <IDS> ;

<STA_BLOCK> = LC <LOC_VAR_DE_LIST> <STA_LIST> RC ;

<STA_LIST> = <STA> <STA_LIST> | BLANK ;

<STA> = <EXP> SEMI
       | return <EXP> SEMI
       | <STA_BLOCK>
       | if LP <EXP> RP <STA> else <STA>
       | while LP <EXP> RP <STA>
       | SEMI
 ;

<LOC_VAR_DE_LIST> = <STA_VAR_DE> <LOC_VAR_DE_LIST>
                  | BLANK
 ;
<STA_VAR_DE> = <TYPE> <VAR_LIST> SEMI
 ;
<VAR_LIST> = <VAR> <VAR_LIST_PLUS>
 ;
<VAR_LIST_PLUS> = COMMA <VAR_LIST>
                | BLANK
 ;
<VAR> = <IDS> <VAR_ARR_PLUS>
 ;
<VAR_ARR_PLUS> = LB <EXP> RB
               | STOP <VAR>
               | BLANK
 ;

<EXP> = <S_EXP> <S_EXP_PLUS>
 ;

<S_EXP_PLUS> = OR <S_EXP> <S_EXP_PLUS>
               | AND <S_EXP> <S_EXP_PLUS>
               | BLANK
 ;

<S_EXP> = <SS_EXP> <SS_EXP_PLUS>
 ;
 <SS_EXP_PLUS> = LESS_EQU <SS_EXP> <SS_EXP_PLUS>
                | GREATER_EQU <SS_EXP> <SS_EXP_PLUS>
                | LESS  <SS_EXP> <SS_EXP_PLUS>
                | GREATER  <SS_EXP> <SS_EXP_PLUS>
                | EQU <SS_EXP> <SS_EXP_PLUS>
                | NOT_EQU <SS_EXP> <SS_EXP_PLUS>
                | BLANK
  ;

<SS_EXP> = <SSS_EXP> <SSS_EXP_PLUS>
 ;
<SSS_EXP_PLUS> = PLUS <SSS_EXP> <SSS_EXP_PLUS>
               | MINUS <SSS_EXP> <SSS_EXP_PLUS>
               | BLANK
  ;
<SSS_EXP> = <SSSS_EXP> <SSSS_EXP_PLUS>
  ;
<SSSS_EXP_PLUS> = BLANK
               | DIV <SSSS_EXP> <SSSS_EXP_PLUS>
               | STAR <SSSS_EXP> <SSSS_EXP_PLUS>

 ;
<SSSS_EXP> = NOT <SSSS_EXP>
            | MINUS <SSSS_EXP>
            | NINT
            | REAL
            | CHAR
            | <IDS> <IDS_PLUS>
            | BOOL
            | LP EXP RP

 ;
<IDS_PLUS> = STOP <VAR>
           | LP <PARS> RP
           | BLANK
           | LB <EXP> RB
 ;

<PARS> = <IDS> <PARS_PLUS>
       | BLANK
 ;
<PARS_PLUS> = COMMA <PARS>
            | BLANK
 ;